// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wstokenv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WsTokenClient is the client API for WsToken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WsTokenClient interface {
	SubscribeToChain(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (WsToken_SubscribeToChainClient, error)
}

type wsTokenClient struct {
	cc grpc.ClientConnInterface
}

func NewWsTokenClient(cc grpc.ClientConnInterface) WsTokenClient {
	return &wsTokenClient{cc}
}

func (c *wsTokenClient) SubscribeToChain(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (WsToken_SubscribeToChainClient, error) {
	stream, err := c.cc.NewStream(ctx, &WsToken_ServiceDesc.Streams[0], "/wstoken.WsToken/SubscribeToChain", opts...)
	if err != nil {
		return nil, err
	}
	x := &wsTokenSubscribeToChainClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WsToken_SubscribeToChainClient interface {
	Recv() (*ChainData, error)
	grpc.ClientStream
}

type wsTokenSubscribeToChainClient struct {
	grpc.ClientStream
}

func (x *wsTokenSubscribeToChainClient) Recv() (*ChainData, error) {
	m := new(ChainData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WsTokenServer is the server API for WsToken service.
// All implementations must embed UnimplementedWsTokenServer
// for forward compatibility
type WsTokenServer interface {
	SubscribeToChain(*ChainRequest, WsToken_SubscribeToChainServer) error
	mustEmbedUnimplementedWsTokenServer()
}

// UnimplementedWsTokenServer must be embedded to have forward compatible implementations.
type UnimplementedWsTokenServer struct {
}

func (UnimplementedWsTokenServer) SubscribeToChain(*ChainRequest, WsToken_SubscribeToChainServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToChain not implemented")
}
func (UnimplementedWsTokenServer) mustEmbedUnimplementedWsTokenServer() {}

// UnsafeWsTokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WsTokenServer will
// result in compilation errors.
type UnsafeWsTokenServer interface {
	mustEmbedUnimplementedWsTokenServer()
}

func RegisterWsTokenServer(s grpc.ServiceRegistrar, srv WsTokenServer) {
	s.RegisterService(&WsToken_ServiceDesc, srv)
}

func _WsToken_SubscribeToChain_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChainRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WsTokenServer).SubscribeToChain(m, &wsTokenSubscribeToChainServer{stream})
}

type WsToken_SubscribeToChainServer interface {
	Send(*ChainData) error
	grpc.ServerStream
}

type wsTokenSubscribeToChainServer struct {
	grpc.ServerStream
}

func (x *wsTokenSubscribeToChainServer) Send(m *ChainData) error {
	return x.ServerStream.SendMsg(m)
}

// WsToken_ServiceDesc is the grpc.ServiceDesc for WsToken service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WsToken_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wstoken.WsToken",
	HandlerType: (*WsTokenServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToChain",
			Handler:       _WsToken_SubscribeToChain_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "go-ws-erc20/ws-token.proto",
}
